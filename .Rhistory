ls
getwd()
load("~/DSClass/RQuizz.RData")
library("swirl")
ls()
library("swirl")
ls()
rm(list-ls())
rm(list=ls())
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
library("rstudio", lib.loc="~/R/win-library/3.1")
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[ c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- ("foo", "bar", "norf")
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- [1:20]
my_vector <- c(1:20)
info()
my_vector <- 1:20
my_vector
dim(my_vector)
lenght(my_vector)
lenght(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
View(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matric()
?matrix()
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical (my_matrix, my_matrix2)
patients <- ("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
my_data <- colnames(cnames)
colnames(my_data) <- cnames
my_data
0 == 1
1 == 1
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
5 = 7
5 == 7
5 !== 7
help
5 != 7
! 5==7
FALSE & FALSE
true & c(true, false, false)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints >7)
any(ints <= 0)
any(ints < 0)
all(ints > 0)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source('~/DSClass/pollutantmean.R')
source('~/DSClass/pollutantmean.R')
cude <- function(x, n){}
cube <- function(x, n){x^3}
cude
cude(3)
cude <- function(3, n) {
x^3
}
cube <- function(3, n) {
x^3
}
cube <- function(x, n) {
x^3
}
cude(3)
cube(3)
x <- 1:10
if (x > 5) {
x <- 0
}
z <- 10
f <- function (x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
x <- 5
y <- if(x < 3){
NA
} else {
10
}
x <- 5
y <- if(x < 3){
NA
} else {
10
}
y
library(datasets)
data(iris)
head(iris)
mean(iris[iris$Species == "virginica",]$Sepal.Length)
mean(iris$Species,$Sepal.Length)
tapply($Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length,iris[iris$Species == "virginica",], mean)
with(iris, tapply(Sepal.Length, Species, mean))
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg,mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
?split
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x['8'] - x['4']
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
?LETTERS
info()
nxt()
?letters
skip()
sample(LETTERS)
flips <- sample(c(0,1),prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips=1)
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
fligs2
flips2
sum(flips2)
?rnorm()
?rnorm
rnorm(10)
rnorm(100)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
rpois(5)
rpois(5, lambda=10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
ColMeans(my_pois)
ColMeans(my_pois[ ,100])
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
c1 <- cut(Comdined$V2, breaks = 5)
## dowlload the file1
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl1, destfile="./data/GDP.csv")
dt_gdp <- data.table(read.csv("./data/GDP.csv", header=T,skip=3, nrows=215))
## removes blank rows
dt_gdp <- dt_gdp[X != ""]
## rename a column
setnames(dt_gdp, "X", "CountryCode")
setnames(dt_gdp, "US.dollars.", "USdollars")
## remove blank cols
dt_gdp <- select(dt_gdp, -contains("X"))
## remove NA and get the 190 ranked countries
dt_gdp <- na.omit(dt_gdp)
## dowlload the file2
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl2, destfile="./data/EDU.csv")
dt_edu<- data.table(read.csv("./data/EDU.csv", header=T)
##combine to data table
rbind_list(dt_gdp, dt_edu)
# merge datasets
combined <- merge(dt_gdp, dt_edu, by = "CountryCode", sort=TRUE)
combined <- combined[order(-Ranking)]
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl1, destfile="./data/GDP.csv")
dt_gdp <- data.table(read.csv("./data/GDP.csv", header=T,skip=3, nrows=215))
opts_chunk$set(echo=TRUE,cache=TRUE)
?opts_chunk
rm(list=ls())
setwd("C:\\Users\\Moira\\RepData_PeerAssessment1")
if (!file.exists("data")){
dir.create("data")
}
df <- unzip("activity.zip", exdir = "data")
df_data <- read.csv(file="./data/activity.csv",head=TRUE, sep=",")
df_data$date = as.Date(df_data$date, "%Y-%m-%d")
str(df_data)
df_totalsteps <- aggregate(steps~date, df_data, sum, na.rm=TRUE)
mediansteps <- median(df_totalsteps$steps)
meansteps <-mean(df_totalsteps$steps)
library(ggplot2)
df_avgsteps <- aggregate(steps ~ interval , data=df_data, mean)
df_avgsteps[which.max(df_avgsteps$steps),]
df_avgsteps[which.max(df_avgsteps$steps),1]
df_avgsteps[which.max(df_avgsteps$steps),2]
df_avgsteps[which.max(df_avgsteps$steps),0]
str(df_avgsteps)
summary(df_avgsteps)
max(df_avgstepse$steps)
max(df_avgsteps$steps)
df_avgsteps[max(df_avgsteps$steps), interval]
df_avgsteps[max(df_avgsteps$steps),1]
with(df_avgsteps, interval[steps== max])
library(plyr)
ddply(df_avgsteps, "interval", subset, steps==max(steps))
with(df_avgsteps,by(steps,max))
The number of missing values are `r NAvaluecount'
df_datamerge <- merge(df_data,df_avgsteps,by="interval")
df_datamerge$steps.y <- as.integer(df_datamerge$steps.y)
df_datamerge <- transform(df_datamerge, steps.x = ifelse(is.na(steps.x), steps.y, steps.x ))
df_datafilled <- select(df_datamerge, interval,steps=steps.x, date )
ibrary(dplyr)
library(dplyr)
df_datafilled <- select(df_datamerge, interval,steps=steps.x, date )
str(df_datafilled)
The median total number of steps taken per day =`r mediansteps`
meansteps <-mean(df_totalsteps$steps)
mediansteps <- median(df_totalsteps$steps)
round(meansteps, digits = 0)
meansteps <- as.integer(round(meansteps, digits = 0)
)
